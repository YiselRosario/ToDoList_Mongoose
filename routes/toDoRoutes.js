var express = require('express'); // this two lines are the first step, is to connect with the server
var router = express.Router(); // this function is with capital R.
var mongoose = require("mongoose"); // add 15 oct.
var ToDo = mongoose.model("ToDo");  // add 15 oct.

//THIS IS THE CONSTRUCTOR > we create the date and delete here. This is beign generated by the SERVER.
//after st up the router and server statrt with this function:


// router.use
//   next();

// this function is calling middleware. is in the middle
//Anytime we tried to reach a route this function is gonna run and check if the route exist first
//if id exist inside our call this function is gonna run first.
router.param('id', function(req, res, next, id){
  ToDo.findOne({_id: id}, function(err, result){ // this comes from the find function in the todo.js file// this var ToDo is in the top.
    if(err)return next(err);
    if(!result) return next({err: "Could not find"}); // this error is because mongoose just throw errors when is broke or something like that
    req.todo = result;
    next();
  });
});

//GET /api/v1/todo >>> This Get have to match with the o.get in the HomeFactory.
router.get('/', function(req, res, next){
  ToDo.find({}, function(err, result){
    if(err) return next(err);
    res.send(result);
  }); // this function with moose should look for everithing stored in the data base.
});

// POST /api/v1/todo >>> this is like the app.post before in the server.js, but now is link into the router.
router.post('/', function(req, res, next){
  var todo = new ToDo(req.body);
  todo.deleted = null;
  todo.created = new Date();
  todo.save(function(err, result){ // this said, take this object and save it in the data base.
    if(err)return next(err);
    console.log(result);
    res.send(result);
  });
});


// PATCH - this works with the if and else buttons to unComplete a task // PATCH works like PUT
router.patch('/:id', function(req, res, next){
  req.todo.deleted = null;
  req.todo.save(function(err, result){
    if(err) return next(err);
    console.log(result);
    res.send(result);
  });
});

//PUT // this works with the completeToDo
router.put('/:id', function(req, res, next){
  ToDo.update({_id: req.todo._id}, {$set: {deleted: new Date()}}, //$set means that only what is inside the $set its gonna be modified and not the whole object.
  function(err, result){
    if(err)return next(err);
      res.send(result);
      });
    });

//Works with the delete button
router.delete('/:id', function(req, res, next){
  ToDo.remove({_id: req.todo.id}, function(err, result){
    if(err)return next(err);
    console.log(result);
    res.send();
  });
 });


module.exports = router; // this is part of the first step too.
